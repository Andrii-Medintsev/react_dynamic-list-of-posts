{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/Error.ts","components/NewCommentForm.tsx","api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onSelectPost","className","map","post","id","title","type","classNames","onClick","Loader","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","Error","client","NewCommentForm","postId","onAddComment","useState","commentAuthor","setCommentAuthor","authorsEmail","setAuthorsEmail","commentText","setCommentText","noAuthor","setNoAuthor","noEmail","setNoEmail","noText","setNoText","commentIsAdding","setCommentIsAdding","onSubmit","event","preventDefault","newComment","name","email","res","catch","finally","htmlFor","placeholder","value","onChange","e","target","PostDetails","isLoading","comments","isError","formIsActive","onDeleteComment","onSetFormIsActive","handleCommentDelete","commentId","filteredComments","filter","comment","deleteComment","length","NONE","href","UserSelector","users","selectedUserId","onSelectUser","usersAreVisible","setUsersAreVisible","onBlur","find","user","role","onMouseDown","App","setUsers","setIsLoading","setSelectedUserId","setIsError","selectedUserPosts","setSelectedUserPosts","setSelectedPostId","postComments","setPostComments","setFormIsActive","useEffect","usersFromServer","USERS","handleCommentsLoads","getPostComments","commentsFromServer","COMMENTS","selectedPost","userId","getUserPosts","userPostsFromServer","NOPOSTS","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df967bc8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  onSelectPost: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  onSelectPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': post.id !== selectedPostId },\n                )}\n                onClick={() => {\n                  if (post.id === selectedPostId) {\n                    onSelectPost(0);\n                  } else {\n                    onSelectPost(post.id);\n                  }\n                }}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open' }\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Error {\n  NONE = '',\n  USERS = 'Something went wrong',\n  COMMENTS = 'Something went wrong',\n  NOPOSTS = 'No posts yet',\n}\n","import classNames from 'classnames';\nimport React, { FormEvent, useState } from 'react';\nimport { createNewComment } from '../api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  onAddComment: (newComment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onAddComment }) => {\n  const [commentAuthor, setCommentAuthor] = useState('');\n  const [authorsEmail, setAuthorsEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [noAuthor, setNoAuthor] = useState(false);\n  const [noEmail, setNoEmail] = useState(false);\n  const [noText, setNoText] = useState(false);\n  const [commentIsAdding, setCommentIsAdding] = useState(false);\n\n  const formSubmitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!commentAuthor) {\n      setNoAuthor(true);\n    }\n\n    if (!authorsEmail) {\n      setNoEmail(true);\n    }\n\n    if (!commentText) {\n      setNoText(true);\n\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name: commentAuthor,\n      email: authorsEmail,\n      body: commentText,\n    };\n\n    setCommentIsAdding(true);\n    createNewComment(newComment)\n      .then(res => onAddComment(res))\n      .catch()\n      .finally(() => setCommentIsAdding(false));\n\n    setCommentText('');\n  };\n\n  const handleReset = () => {\n    setCommentAuthor('');\n    setAuthorsEmail('');\n    setCommentText('');\n    setNoAuthor(false);\n    setNoEmail(false);\n    setNoText(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={formSubmitHandler}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': noAuthor },\n            )}\n            value={commentAuthor}\n            onChange={(e) => {\n              setCommentAuthor(e.target.value);\n              setNoAuthor(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {noAuthor && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noAuthor && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': noEmail },\n            )}\n            value={authorsEmail}\n            onChange={(e) => {\n              setAuthorsEmail(e.target.value);\n              setNoEmail(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {noEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': noText },\n            )}\n            value={commentText}\n            onChange={e => {\n              setCommentText(e.target.value);\n              setNoText(false);\n            }}\n          />\n        </div>\n\n        {noText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': commentIsAdding },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => handleReset()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from './types/Comment';\nimport { NewComment } from './types/NewComment';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createNewComment = (data: NewComment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\nimport { deleteComment } from '../api';\n\ntype Props = {\n  post?: Post,\n  isLoading: string,\n  comments: Comment[],\n  onAddComment: (newComment: Comment) => void,\n  onDeleteComment: (comments: Comment[]) => void,\n  isError: Error,\n  formIsActive: boolean,\n  onSetFormIsActive: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  isLoading,\n  comments,\n  isError,\n  formIsActive,\n  onAddComment,\n  onDeleteComment,\n  onSetFormIsActive,\n}) => {\n  const handleCommentDelete = (commentId: number) => {\n    const filteredComments\n      = comments.filter(comment => comment.id !== commentId);\n\n    onDeleteComment(filteredComments);\n    deleteComment(commentId)\n      .then()\n      .catch()\n      .finally();\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading === 'comments' && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {isError}\n            </div>\n          )}\n\n          {!isLoading\n            && comments.length === 0\n            && isError === Error.NONE\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {!isLoading\n            && comments.length > 0\n            && isError === Error.NONE && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleCommentDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isLoading && !formIsActive && isError === Error.NONE && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => onSetFormIsActive(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {formIsActive && (\n          <NewCommentForm\n            postId={post?.id || 0}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  onSelectUser,\n}) => {\n  const [usersAreVisible, setUsersAreVisible] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': usersAreVisible },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setUsersAreVisible(!usersAreVisible)}\n          onBlur={() => setUsersAreVisible(false)}\n        >\n          <span>\n            {users.find(user => user.id === selectedUserId)?.name\n              || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href=\"#user-1\"\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUserId },\n              )}\n              key={user.id}\n              onMouseDown={() => onSelectUser(user.id)}\n              onClick={() => setUsersAreVisible(false)}\n\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getPostComments, getUserPosts, getUsers } from './api';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { Error } from './types/Error';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isError, setIsError] = useState(Error.NONE);\n  const [selectedUserPosts, setSelectedUserPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [formIsActive, setFormIsActive] = useState(false);\n\n  useEffect(() => {\n    setIsError(Error.NONE);\n\n    getUsers()\n      .then((usersFromServer) => setUsers(usersFromServer))\n      .catch(() => setIsError(Error.USERS));\n  }, []);\n\n  const handleUserSelect = (userId: number) => {\n    setSelectedPostId(0);\n    setSelectedUserPosts([]);\n    setIsError(Error.NONE);\n\n    if (userId === selectedUserId) {\n      return;\n    }\n\n    setIsLoading('users');\n    setSelectedUserId(userId);\n\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        if (userPostsFromServer.length === 0) {\n          setIsError(Error.NOPOSTS);\n        }\n\n        setSelectedUserPosts(userPostsFromServer);\n      })\n      .catch(() => {\n        setIsError(Error.USERS);\n        setSelectedUserPosts([]);\n      })\n      .finally(() => setIsLoading(''));\n  };\n\n  const handleCommentsLoads = (postId: number) => {\n    setIsLoading('comments');\n    setIsError(Error.NONE);\n\n    getPostComments(postId)\n      .then(commentsFromServer => setPostComments(commentsFromServer))\n      .catch(() => setIsError(Error.COMMENTS))\n      .finally(() => setIsLoading(''));\n  };\n\n  const handlePostSelect = (postId: number) => {\n    if (postId !== selectedPostId) {\n      setFormIsActive(false);\n    }\n\n    setSelectedPostId(postId);\n    handleCommentsLoads(postId);\n  };\n\n  const handleAddComment = (newComment: Comment) => {\n    setPostComments([...postComments, newComment]);\n  };\n\n  const selectedPost\n    = selectedUserPosts.find(post => post.id === selectedPostId);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onSelectUser={handleUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isError && selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading === 'users' && <Loader />}\n\n                {isError === Error.USERS && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {isError}\n                  </div>\n                )}\n\n                {\n                  !isLoading\n                  && isError === Error.NOPOSTS\n                  && selectedUserId > 0\n                  && selectedUserPosts.length === 0\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      {isError}\n                    </div>\n                  )\n                }\n\n                {\n                  selectedUserId !== 0\n                  && selectedUserPosts.length > 0\n                  && !isError\n                  && (\n                    <PostsList\n                      posts={selectedUserPosts}\n                      selectedPostId={selectedPostId}\n                      onSelectPost={handlePostSelect}\n                    />\n                  )\n                }\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId !== 0 },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPostId > 0\n                && (\n                  <PostDetails\n                    post={selectedPost}\n                    isLoading={isLoading}\n                    comments={postComments}\n                    onAddComment={handleAddComment}\n                    onDeleteComment={setPostComments}\n                    isError={isError}\n                    formIsActive={formIsActive}\n                    onSetFormIsActive={setFormIsActive}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}