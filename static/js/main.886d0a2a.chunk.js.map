{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorType.ts","components/NewCommentForm.tsx","api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","selectedUserPosts","selectedPostId","onSelectPost","className","map","post","id","title","type","classNames","onClick","Loader","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","ErrorType","client","NewCommentForm","onAddComment","useState","commentAuthor","setCommentAuthor","commentAuthorsEmail","setCommentAuthorsEmail","commentText","setCommentText","isCommentAuthorsNameEmpty","setisAuthorNameEmpty","isAuthorsEmailEmpty","setIsAuthorsEmailEmpty","isCommentTextEmpty","setIsCommentTextEmpty","isCommentAdding","setIsCommentAdding","onSubmit","event","preventDefault","trim","newComment","postId","name","email","res","catch","finally","htmlFor","placeholder","value","onChange","e","target","PostDetails","selectedPost","isLoading","postComments","errorMessage","isFormActive","onDeleteComment","onSetIsFormActive","LoadingFailed","length","comment","href","UserSelector","users","selectedUserId","onSelectUser","usersAreVisible","setUsersAreVisible","onBlur","find","user","role","onMouseDown","App","setUsers","setIsLoading","setSelectedUserId","NONE","setErrorMessage","setSelectedUserPosts","setSelectedPostId","setPostComments","setIsFormActive","useEffect","usersFromServer","handleCommentsLoad","getPostComments","commentsFromServer","userId","getUserPosts","userPostsFromServer","NOPOSTS","arg","commentId","updatedComments","filter","deleteComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.886d0a2a.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUserPosts: Post[],\n  selectedPostId: number | null,\n  onSelectPost: (postId: number | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserPosts,\n  selectedPostId,\n  onSelectPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {selectedUserPosts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': post.id !== selectedPostId },\n                )}\n                onClick={() => onSelectPost(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open' }\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  NONE = '',\n  LoadingFailed = 'Something went wrong',\n  NOPOSTS = 'No posts yet',\n}\n","import classNames from 'classnames';\nimport React, { FormEvent, useState } from 'react';\nimport { createComment } from '../api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPostId: number,\n  onAddComment: (arg: Comment | null) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  onAddComment,\n}) => {\n  const [commentAuthor, setCommentAuthor] = useState('');\n  const [commentAuthorsEmail, setCommentAuthorsEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [isCommentAuthorsNameEmpty, setisAuthorNameEmpty] = useState(false);\n  const [isAuthorsEmailEmpty, setIsAuthorsEmailEmpty] = useState(false);\n  const [isCommentTextEmpty, setIsCommentTextEmpty] = useState(false);\n  const [isCommentAdding, setIsCommentAdding] = useState(false);\n\n  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!commentAuthor.trim()) {\n      setisAuthorNameEmpty(true);\n      setCommentAuthor('');\n    }\n\n    if (!commentAuthorsEmail.trim()) {\n      setIsAuthorsEmailEmpty(true);\n      setCommentAuthorsEmail('');\n    }\n\n    if (!commentText.trim()) {\n      setIsCommentTextEmpty(true);\n      setCommentText('');\n\n      return;\n    }\n\n    const newComment = {\n      postId: selectedPostId,\n      name: commentAuthor,\n      email: commentAuthorsEmail,\n      body: commentText,\n    };\n\n    setIsCommentAdding(true);\n    createComment(newComment)\n      .then(res => onAddComment(res))\n      .catch(() => onAddComment(null))\n      .finally(() => setIsCommentAdding(false));\n\n    setCommentText('');\n  };\n\n  const handleCommentAuthorChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setCommentAuthor(e.target.value);\n    setisAuthorNameEmpty(false);\n  };\n\n  const handleCommentAuthorsEmailChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setCommentAuthorsEmail(e.target.value);\n    setIsAuthorsEmailEmpty(false);\n  };\n\n  const handleCommentTextChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(e.target.value);\n    setIsCommentTextEmpty(false);\n  };\n\n  const handleFormReset = () => {\n    setCommentAuthor('');\n    setCommentAuthorsEmail('');\n    setCommentText('');\n    setisAuthorNameEmpty(false);\n    setIsAuthorsEmailEmpty(false);\n    setIsCommentTextEmpty(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isCommentAuthorsNameEmpty },\n            )}\n            value={commentAuthor}\n            onChange={handleCommentAuthorChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isCommentAuthorsNameEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isCommentAuthorsNameEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isAuthorsEmailEmpty },\n            )}\n            value={commentAuthorsEmail}\n            onChange={handleCommentAuthorsEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isAuthorsEmailEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isAuthorsEmailEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentTextEmpty },\n            )}\n            value={commentText}\n            onChange={handleCommentTextChange}\n          />\n        </div>\n\n        {isCommentTextEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentAdding },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from './types/Comment';\nimport { NewComment } from './types/NewComment';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: NewComment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  selectedPost?: Post,\n  isLoading: boolean,\n  postComments: Comment[],\n  onAddComment: (arg: Comment | null) => void,\n  onDeleteComment: (commentId: number) => void,\n  errorMessage: ErrorType,\n  isFormActive: boolean,\n  onSetIsFormActive: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isLoading,\n  postComments,\n  errorMessage,\n  isFormActive,\n  onAddComment,\n  onDeleteComment,\n  onSetIsFormActive,\n}) => (\n  <div className=\"content\" data-cy=\"PostDetails\">\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost?.id}: ${selectedPost?.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost?.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {isLoading && <Loader />}\n\n        {!isLoading && errorMessage === ErrorType.LoadingFailed && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            {errorMessage}\n          </div>\n        )}\n\n        {!isLoading\n          && !postComments.length\n          && !errorMessage\n          && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n        {!isLoading\n          && postComments.length > 0\n          && !errorMessage\n          && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n        {!isLoading && !isFormActive && !errorMessage && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => onSetIsFormActive(true)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n\n      {!errorMessage && isFormActive && (\n        <NewCommentForm\n          selectedPostId={selectedPost?.id || 0}\n          onAddComment={onAddComment}\n        />\n      )}\n    </div>\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number | null,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  onSelectUser,\n}) => {\n  const [usersAreVisible, setUsersAreVisible] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': usersAreVisible },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setUsersAreVisible(!usersAreVisible)}\n          onBlur={() => setUsersAreVisible(false)}\n        >\n          <span>\n            {users.find(user => user.id === selectedUserId)?.name\n              || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUserId },\n              )}\n              key={user.id}\n              onMouseDown={() => onSelectUser(user.id)}\n              onClick={() => setUsersAreVisible(false)}\n\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport {\n  deleteComment,\n  getPostComments,\n  getUserPosts,\n  getUsers,\n} from './api';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [errorMessage, setErrorMessage] = useState(ErrorType.NONE);\n  const [selectedUserPosts, setSelectedUserPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isFormActive, setIsFormActive] = useState(false);\n\n  useEffect(() => {\n    setErrorMessage(ErrorType.NONE);\n\n    getUsers()\n      .then((usersFromServer) => setUsers(usersFromServer))\n      .catch(() => setErrorMessage(ErrorType.LoadingFailed));\n  }, []);\n\n  const handleUserSelect = (userId: number) => {\n    setSelectedPostId(null);\n    setSelectedUserPosts([]);\n    setErrorMessage(ErrorType.NONE);\n\n    if (userId === selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    setSelectedUserId(userId);\n\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        if (userPostsFromServer.length === 0) {\n          setErrorMessage(ErrorType.NOPOSTS);\n        }\n\n        setSelectedUserPosts(userPostsFromServer);\n      })\n      .catch(() => {\n        setErrorMessage(ErrorType.LoadingFailed);\n        setSelectedUserPosts([]);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleCommentsLoad = (postId: number) => {\n    setIsLoading(true);\n    setErrorMessage(ErrorType.NONE);\n\n    getPostComments(postId)\n      .then(commentsFromServer => setPostComments(commentsFromServer))\n      .catch(() => setErrorMessage(ErrorType.LoadingFailed))\n      .finally(() => setIsLoading(false));\n  };\n\n  const handlePostSelect = (postId: number | null) => {\n    if (!postId) {\n      setSelectedPostId(null);\n\n      return;\n    }\n\n    if (postId === selectedPostId) {\n      setSelectedPostId(null);\n\n      return;\n    }\n\n    setIsFormActive(false);\n    setSelectedPostId(postId);\n    handleCommentsLoad(postId);\n  };\n\n  const handleAddComment = (arg: Comment | null) => {\n    if (!arg) {\n      setErrorMessage(ErrorType.LoadingFailed);\n\n      return;\n    }\n\n    setPostComments([...postComments, arg]);\n  };\n\n  const handleCommentDelete = (commentId: number) => {\n    const updatedComments\n      = postComments.filter(comment => commentId !== comment.id);\n\n    setPostComments(updatedComments);\n\n    deleteComment(commentId)\n      .catch(() => setErrorMessage(ErrorType.LoadingFailed));\n  };\n\n  const selectedPost\n    = selectedUserPosts.find(post => post.id === selectedPostId);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onSelectUser={handleUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!errorMessage && !selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && !selectedUserPosts.length && <Loader />}\n\n                {errorMessage === ErrorType.LoadingFailed\n                && !selectedUserPosts.length\n                && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {\n                  !isLoading\n                  && errorMessage === ErrorType.NOPOSTS\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      {errorMessage}\n                    </div>\n                  )\n                }\n\n                {selectedUserPosts.length > 0\n                  && (\n                    <PostsList\n                      selectedUserPosts={selectedUserPosts}\n                      selectedPostId={selectedPostId}\n                      onSelectPost={handlePostSelect}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId },\n            )}\n          >\n            <div className=\"tile is-child box is-success\">\n              {selectedPostId\n                && (\n                  <PostDetails\n                    selectedPost={selectedPost}\n                    isLoading={isLoading}\n                    postComments={postComments}\n                    onAddComment={handleAddComment}\n                    onDeleteComment={handleCommentDelete}\n                    errorMessage={errorMessage}\n                    isFormActive={isFormActive}\n                    onSetIsFormActive={setIsFormActive}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}